
https://docs.python.org/3/library/re.html English

https://habr.com/ru/post/349860/#Primery_regulyarnyh_vyrazheniy 



Перечисление

Вертикальная черта разделяет допустимые варианты. Например, «gray|grey» соответствует gray или grey.



Группировка

Круглые скобки используются для определения области действия и приоритета операторов.
 Например, «gray|grey» и «gr(a|e)y» являются разными образцами, но они оба описывают множество, содержащее gray и grey.



Квантификация

Квантификатор после символа или группы определяет, сколько раз предшествующее выражение может встречаться.
{n,m}
общее выражение, повторений может быть от n до m включительно.
{n,}
общее выражение, n и более повторений.
{,m}
общее выражение, не более m повторений.
{n}
общее выражение, ровно n повторений
 ?
Знак вопроса означает 0 или 1 раз, то же самое, что и {0,1}. Например, «colou?r» соответствует и color, и colour.
*
Звёздочка означает 0, 1 или любое число раз ({0,}). Например, «go*gle» соответствует gogle, google, gooogle, ggle, и др.
+
Плюс означает хотя бы 1 раз ({1,}). Например, «go+gle» соответствует gogle, google и т. д. (но не ggle).




Регулярные выражения состоят из констант и операторов, которые определяют множества строк и множества операций на них соответственно. 
На данном конечном алфавите Σ определены следующие константы:

(пустое множество) ∅ обозначает ∅
(пустая строка) ε обозначает множество {ε}
(строка) a в Σ обозначает множество {a}

и следующие операции:
(связь, конкатенация) RS обозначает множество { αβ | α из R и β из S }.

 Пример: {"ab", "c"}{"d", "ef"} = {"abd", "abef", "cd", "cef"}.
 
(перечисление) R|S обозначает объединение R и S.

(замыкание Клини, звезда Клини) R* обозначает минимальное надмножество из R, которое содержит ε и закрыто связью строк. Это есть множество всех строк, которые могут быть получены связью нуля или более строк из R. Например, {"ab", "c"}* = {ε, "ab", "c", "abab", "abc", "cab", "cc", "ababab", … }.
Многие книги используют символы ∪, + или ∨ для перечисления вместо вертикальной черты.






[:upper:]	[A-Z]		символы верхнего регистра

[:lower:]	[a-z]		символы нижнего регистра

[:alpha:]	[A-Za-z]		символы верхнего и нижнего регистра

[:alnum:]	[A-Za-z0-9]		цифры, символы верхнего и нижнего регистра

[A-Za-z0-9_]	\w	цифры, символы верхнего, нижнего регистра и "_"

[^A-Za-z0-9_]	\W	не цифры, символы верхнего, нижнего регистра и "_"

[:digit:]	[0-9]	\d	цифры

[^0-9]	\D	не цифры

[:xdigit:]	[0-9A-Fa-f]		шестнадцатеричные цифры

[:punct:]	[.,!?:…]		знаки пунктуации

[:blank:]	[ \t]		пробел и TAB

[:space:]	[ \t\n\r\f\v]	\s	символы пробелов(пропуска)

[^ \t\n\r\f\v]	\S	не символы пробелов(пропуска)

[:cntrl:]	[\x00-\x1F\x7F]		символы управления

[:graph:]	[:alnum:] ∪ [:punct:]		символы печати

[:print:]	[\x20-\x7E]		символы печати и символы пропуска(видимые символы и пробелы)




Группы

()
Простая группа с захватом.


(?:)
Группа без захвата. То же самое, но заключённое в скобках выражение не добавляется к списку захваченных фрагментов. 
Например, если требуется найти или «здравствуйте», или «здраститя», но не важно, какое именно приветствие найдено, можно воспользоваться выражением здра(?:ститя|вствуйте).

(?=)
Группа с положительной опережающей проверкой (positive lookahead assertion).
 Продолжает поиск только если справа от текущей позиции в тексте находится заключённое в скобки выражение. 
 При этом само выражение не захватывается. Например, говор(?=ить) найдёт «говор» в «говорить», но не в «говорит».
 Иными словами, ищет в строке «говор», после которого сразу идут символы «ить» — если находит, выдает истину, иначе — ложь (FALSE).

(?!)
Группа с отрицательной опережающей проверкой (negative lookahead assertion).
 Продолжает поиск только если справа от текущей позиции в тексте не находится заключённое в скобки выражение. 
 При этом само выражение не захватывается. Например, говор(?!ить) найдёт «говор» в «говорит», но не в «говорить».

(?<=)
Группа с положительной ретроспективной проверкой (positive lookbehind assertion).
 Продолжает поиск только если слева от текущей позиции в тексте находится заключённое в скобки выражение. 
 При этом само выражение не захватывается. Например, (?<=об)говорить найдёт «говорить» в «обговорить», но не в «уговорить».

(?<!)
Группа с отрицательной ретроспективной проверкой (negative lookbehind assertion).
 Продолжает поиск только если слева от текущей позиции в тексте не находится заключённое в скобки выражение.
 При этом само выражение не захватывается. Например, (?<!об)говорить найдёт «говорить» в «уговорить», но не в «обговорить».
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 