# d = {}
# product1 = {'title': 'Sony', 'price': 100}
# product2 = dict(title='iPhone', price=110)
#
# users = [
#     ['bob@gmail.com', 'Bob'],
#     ['katy@gmail.com', 'Katy'],
#     ['john@gmail.com', 'John']
# ]
# d_users = dict(users)
# print(users)
# print(d_users)
#
# users_t = (
#     ('bob@gmail.com', 'Bob'),
#     ('katy@gmail.com', 'Katy'),
#     ('john@gmail.com', 'John')
# )
# t_users = dict(users_t)
# print(users_t)
# print(t_users)
#
# print(d)
# print(product1)
# print(product2)

# product3 = dict.fromkeys(['price1', 'price2', 'price3'], 50)
# print(product3)

# nums = {i: i + 1 for i in range(1, 10)}
# print(nums)

product1 = {'title': 'Sony', 'price': 100}
product2 = dict(title='iPhone', price=110)

# print(product1['title2'])
# print(product1.get('title2', 'NO')) # if no key

# print(nums['1']) # error
# print(nums['1']) # OK

# for key in product1:
#     print(f'{key}: {product1[key]}')
#
#
# for key, value in product1.items():
#     print(key, value)

# products = [
#     {'title': 'Sony', 'price': 100},
#     {'title': 'iPhone', 'price': 110},
#     {'title': 'Samsung', 'price': 90}
# ]
#
# print(products)
#
# for product in products:
#     print(product['title'], product['price'])



# dict.clear() - очищает словарь
# dict.copy() - возвращает копию словаря
# dict.get(key[, default]) - возвращает значение ключа, но если его нет, не бросает исключение, а возвращает default (по умолчанию None)
# dict.items() - возвращает пары (ключ, значение)
# dict.keys() - возвращает ключи в словаре
# dict.pop(key[, default]) - удаляет ключ и возвращает значение. Если ключа нет, возвращает default (по умолчанию бросает исключение)
# dict.popitem() - удаляет и возвращает пару (ключ, значение). Если словарь пуст, бросает исключение KeyError. Помните, что словари неупорядочены
# dict.setdefault(key[, default]) - возвращает значение ключа, но если его нет, не бросает исключение, а создает ключ с значением default (по умолчанию None)
# dict.update([other]) - обновляет словарь, добавляя пары (ключ, значение) из other. Существующие ключи перезаписываются. Возвращает None (не новый словарь!)
# dict.values() - возвращает значения в словаре

product1 = {'title': 'Sony', 'price': 100}
# print(product1.items())
# print(product1.keys())
# print(product1.pop('title', 'NO'))

print(product1)
# print(product1.setdefault('title2', 'test'))
product1.update({'test': 'value'})
product1.update({'price': 200})
print(product1)
print(product1.values())



cmp(dict1, dict2)		Compares elements of both dict.

len(dict)			Gives the total length of the dictionary. This would be equal to the number of items in the dictionary.

str(dict)			Produces a printable string representation of a dictionary

type(variable)			Returns the type of the passed variable. If passed variable is dictionary, then it would return a dictionary type.


dict.clear()			Removes all elements of dictionary dict

dict.copy()			Returns a shallow copy of dictionary dict

dict.fromkeys()			Create a new dictionary with keys from seq and values set to value.

dict.get(key, default=None)	For key key, returns value or default if key not in dictionary

dict.has_key(key)		Returns true if key in dictionary dict, false otherwise

dict.items()			Returns a list of dict's (key, value) tuple pairs

dict.keys()			Returns list of dictionary dict's keys

dict.setdefault(key, default=None)	Similar to get(), but will set dict[key]=default if key is not already in dict

dict.update(dict2)		Adds dictionary dict2's key-values pairs to dict

dict.values()			Returns list of dictionary dict's values

