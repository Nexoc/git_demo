\n	Перевод каретки на новую строку
\b	Возврат каретки на один символ назад
\f	Перевод каретки на новую страницу
\r	Возврат каретки на начало строки
\t	Горизонтальная табуляция
\v	Вертикальная табуляция
\a	Подача звукового сигнала
\N	Идентификатор базы данных
\u, \U	16-битовый и 32-битовый символ Unicode
\x	Символ в 16-ричной системе исчисления
\o	Символ в 8-ричной системе исчисления
\0	Символ Null


string = "text"
newString = "{:*^10}".format(string)
print(newString)

***text***



str(obj)	              			 Преобразует объект к строковому виду
len(s)                              		Возвращает длину строки
find(s, start, end), rfind(s, start, end)	             Возвращает индекс первого и последнего вхождения подстроки в s или -1, при этом поиск идет в границах от start до end
replace(s, ns)	                                      Меняет выбранную последовательность символов в s на новую подстроку ns
split(c)					Разбивает на подстроки при помощи выбранного разделителя c
join(c)						Объединяет список строк в одну при помощи выбранного разделителя c
strip(s), lstrip(s), rstrip(s)				Убирает пробелы с обоих сторон s, только слева или только справа
center(num, c), ljust(num, c), rjust(num, c)				Возвращает отцентрированную строку, выравненную по левому и по правому краю с длиной num и символом c по краям
lower(), upper()				Перевод всех символов в нижний и верхний регистр
startwith(ns), endwith(ns)			Проверяет, начинается ли или заканчивается строка подстрокой ns
islower(), isupper()				Проверяет, состоит ли строка только из символов в нижнем и верхнем регистре
swapcase()					Меняет регистр всех символов на противоположный
title()						Переводит первую букву каждого слова в верхний регистр, а все остальные в нижний
capitalize()					Переводит первую букву в верхний регистр, а все остальные в нижний
isalpha()					Проверяет, состоит ли только из букв
isdigit()					Проверяет, состоит ли только из цифр
isnumeric()					Проверяет, является ли строка числом


# s = r'C:\d\new.txt'
# print(s)

# s = 'Py' 'thon'
# print(s)

# s1 = 'Hello, '
# s2 = 'world!'
# s3 = s1 + s2
# print(s3)

# name = 'John'
# age = 20
#
# print('My name is ' + name + " I'm " + str(age))

# print('hi ' * 5)

#s = 'Hello world!'
#print(s[0])
#print(s[-12])

'''
+---+---+---+---+---+---+---+---+---+---+---+---+
| H | e | l | l | o |   | w | o | r | l | d | ! |
+---+---+---+---+---+---+---+---+---+---+---+---+
0   1   2   3   4   5   6   7   8   9  10  11  12
-12 -11 -10 -9  -8  -7  -6  -5  -4  -3  -2 -1
'''
#[X:Y:Z]



len(str) - Длина строки

str.capitalize() - Переводит первый символ строки в верхний регистр, а все остальные в нижний

str.center(width, [fill]) - Возвращает отцентрованную строку, по краям которой стоит символ fill (пробел по умолчанию)

str.count(str, [start],[end]) - Возвращает количество непересекающихся вхождений подстроки в диапазоне [начало, конец] (0 и длина строки по умолчанию)

str.find(str, [start],[end]) - Поиск подстроки в строке. Возвращает номер первого вхождения или -1

str.index(str, [start],[end]) - Поиск подстроки в строке. Возвращает номер первого вхождения или вызывает ValueError

str.replace(шаблон, замена) - Замена шаблона

str.split([символ])- Разбиение строки по разделителю

str.isdigit() - Состоит ли строка из цифр
str.isalpha() - Состоит ли строка из букв
str.isalnum() - Состоит ли строка из цифр или букв
str.islower() - Состоит ли строка из символов в нижнем регистре
str.isupper() - Состоит ли строка из символов в верхнем регистре



name = 'John'
age = 30

# print('My name is ' + name + '. I\'m ' + str(age))
# print('My name is %(name)s. I\'m %(age)d' %{'name': name, 'age': age})
# print('My name is %s. I\'m %d' %(name, age))
# print('Title: %s, Price: %.2f' %('Sony', 40))

# format
# print('My name is {}. I\'m {}'.format(name, age))
# print('My name is {0}. I\'m {1}'.format(name, age))
# print('My name is {a}. I\'m {b}'.format(a='Andrey', b=age))

# f-strings
# print(f'My name is {name}. I\'m {age}')
# print(f'My name is {name}. I\'m {age + 5}')
print('5 + 2 = {}'.format(5 + 2))
print(f'5 + 2 = {5 + 2}')





l = list(range(1, 10))
l2 = list('hello')

print(l, l2)

s = '-'.join(map(str, l))
s2 = ','.join(l2)

print(s)
print(s2)


ПЕРЕВОРАЧИВАНИЕ СТРОК

print('TURBO'[::-1]) # 'OBRUT'


print(''.join(reversed('TURBO'))) # 'OBRUT'



def reverse_string(s):
    chars = list(s)
    for i in range(len(s) // 2):
        tmp = chars[i]
        chars[i] = chars[len(s) - i - 1]
        chars[len(s) - i - 1] = tmp
    return ''.join(chars)
 
data = reverse_string('TURBO')
print(data) # 'OBRUT'