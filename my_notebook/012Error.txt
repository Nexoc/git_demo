# print('Hello')
# print(100 / 0)
# print(1 + '2')
# print(int('test'))

# try:
#     num = 100 / 0
# except ZeroDivisionError:
#     num = 0
# except TypeError:
#     num = 1

# try:
#     num = 100 / 2
# except Exception:
#     num = 0
# else:
#     print('Else')
# finally:
#     print('Finally')
#
# print(num)
# print('Hi')

# while True:
#     try:
#         num = int(input('Enter your number: '))
#         print(f'100 / {num} = {100 / num}')
#         break
#     except ZeroDivisionError:
#         print('The number must be greater than zero')
#     except ValueError:
#         print('Must be a number')

while True:
    try:
        num = int(input('Enter your number: '))
        print(f'100 / {num} = {100 / num}')
        break
    except Exception:
        print('The number must be greater than zero')


###############################################################################################

# Cинтаксические ошибки
# >>> while True print('Hello world')
# File "<stdin>", line 1, in ?
# while True print('Hello world')
# ^
# SyntaxError: invalid syntax

# Исключительные ситуации
# >>> 10 * (1/0)
# Traceback (most recent call last):
# File "<stdin>", line 1, in ?
# ZeroDivisionError: integer division or modulo by zero

# >>> 4 + spam*3
# Traceback (most recent call last):
# File "<stdin>", line 1, in ?
# NameError: name 'spam' is not defined

# >>> '2' + 2
# Traceback (most recent call last):
# File "<stdin>", line 1, in ?
# TypeError: cannot concatenate 'str' and 'int' objects

# обратите внимание на эти слова SyntaxError ZeroDivisionError NameError TypeError
# все это - исключительные ситуации, exceptions. Это обьекты класса с таким названием.

# все исключения - классы, порожденные от BaseException
# BaseException
#     +-- SystemExit
#     +-- KeyboardInterrupt
#     +-- GeneratorExit
#     +-- Exception
#     +-- StopIteration
#     +-- StopAsyncIteration
#     +-- ArithmeticError
#     |   +-- FloatingPointError
#     |   +-- OverflowError
#     |   +-- ZeroDivisionError
#     +-- AssertionError
#     +-- AttributeError
#     +-- BufferError
#     +-- EOFError
#     +-- ImportError
#     |   +-- ModuleNotFoundError
#     +-- LookupError
#     |   +-- IndexError
#     |   +-- KeyError
#     +-- MemoryError
#     +-- NameError
#     |   +-- UnboundLocalError
#     +-- OSError
#     |   +-- BlockingIOError
#     |   +-- ChildProcessError
#     |   +-- ConnectionError
#     |   |   +-- BrokenPipeError
#     |   |   +-- ConnectionAbortedError
#     |   |   +-- ConnectionRefusedError
#     |   |   +-- ConnectionResetError
#     |   +-- FileExistsError
#     |   +-- FileNotFoundError
#     |   +-- InterruptedError
#     |   +-- IsADirectoryError
#     |   +-- NotADirectoryError
#     |   +-- PermissionError
#     |   +-- ProcessLookupError
#     |   +-- TimeoutError
#     +-- ReferenceError
#     +-- RuntimeError
#     |   +-- NotImplementedError
#     |   +-- RecursionError
#     +-- SyntaxError
#     |   +-- IndentationError
#     |       +-- TabError
#     +-- SystemError
#     +-- TypeError
#     +-- ValueError
#     |   +-- UnicodeError
#     |       +-- UnicodeDecodeError
#     |       +-- UnicodeEncodeError
#     |       +-- UnicodeTranslateError
#     +-- Warning
#         +-- DeprecationWarning
#         +-- PendingDeprecationWarning
#         +-- RuntimeWarning
#         +-- SyntaxWarning
#         +-- UserWarning
#         +-- FutureWarning
#         +-- ImportWarning
#         +-- UnicodeWarning
#         +-- BytesWarning
#         +-- ResourceWarning

# полное описание здесь - https://docs.python.org/3/library/exceptions.html

# То есть в момент нештатной ситуации интерпретатор создает обьект нужного класса и "бросает" его (raise)
# Куда бросает? в стек вызовов - чуть позже разберем что это такое.
# Если программа поймала этот обьект исключительной ситуации - то она будет устойчивой к ошибкам,
# и это хорошо. Если не поймала - то выполнение останавливается.

# Место где возникло исключение, сохраняется в аттрибуте __traceback__ обьекта исключения


#######################################################################################################################




# Ловля и обработка исключений-ошибок

# код, который _может_ содержать ошибки помещают в спецкапсулу try/except
try:
    i = 0
    print(10 / i)
    print('сделано')
except:
    # ловим все ошибки
    print('нельзя делить на ноль!')

# нужно указывать конкретную ошибку
try:
    i = 0
    print(10 / i)
    print('сделано')
except ZeroDivisionError:  # указываем имя класса
    print('нельзя делить на ноль!')

# можно перечислять классы ошибок, если обработка их одинаковая
try:
    truba = a + b
    truba = 10/0
except (ZeroDivisionError, NameError):  # указываем имена классов
    print('что-то пошло не так, но мы устояли')

# или на каждый класс ошибки писать свой обработчик
try:
    truba = a + b
    truba = 10/0
except ZeroDivisionError:
    print('Они -убили Кенни- хотели делить на ноль, но мы не упали')
except NameError:
    print('Нет такой переменной, кто писал этот код?!')

# можно ловить сам обьект класса ошибки
try:
    a = 10/0
except ZeroDivisionError as exc:
    print(f'вот что пошло не так - {exc}, но мы еще на плаву')

# или для группы исключений
try:
    truba = a + b
except (ZeroDivisionError, NameError) as exc:
    print(f'вот что пошло не так - {exc}, но мы еще на плаву')
# имя переменной для указание на обьект исключения произвольное, но принято использовать exc

# с ошибкой прилетают параметры ошибки - Exception.args
try:
    file = open('blabla.txt')
except OSError as exc:
    print(f'вот что пошло не так - {exc} параметры {exc.args}, но мы еще на плаву')

# некоторые ошибки (OSError) содержат доп информацию, для остальных args это просто сообщение для вывода.
try:
    a = 10/0
except ZeroDivisionError as exc:
    print(f'вот что пошло не так - {exc} параметры {exc.args}, но мы еще на плаву')
# вообще, состав обьекта исключения зависит от ошибки, надо смотреть документацию.


# ошибки летят по стеку вызовов функций
def f1(number):
    return 10 / number


def f2():
    summ = 0
    for i in range(2, -1, -1):
        summ += f1(number=i)
        print(summ)
    return summ

# total = f2()
try:
    total = f2()
except ZeroDivisionError as exc:
    print(f'вот что пошло не так - {exc}, но мы устояли')


# и ловить их можно на разных уровнях
def f1(number):
    return 10 / number


def f2():
    summ = 0
    for i in range(2, -1, -1):
        try:
            summ += f1(number=i)
            print(summ)
        except ZeroDivisionError as exc:
            print(f'внутри f1 что-то пошло не так: {exc}, но мы устояли')
    return summ / 0


try:
    f2()
except ZeroDivisionError as exc:
    print(f'внутри f2 что-то пошло не так: {exc}, но мы устояли')


# если ошибка не поймана, она падает до дна стека и разбивается об консоль. а программа умирает...
def f1(number):
    return total / number


def f2():
    summ = 0
    for i in range(2, -1, -1):
        try:
            summ += f1(number=i)
            print(summ)
        except ZeroDivisionError as exc:
            print(f'внутри f1 что-то пошло не так: {exc}, но мы устояли')
    return summ / 0


try:
    f2()
except ZeroDivisionError as exc:
    print(f'внутри f2 что-то пошло не так: {exc}, но мы устояли')


# Действия, если исключений не было - else
try:
    10 * (1/0)
except ZeroDivisionError:
    print('нельзя делить на ноль!')
else:
    print('неужели?!')

# действия по подчистке - выполняется всегда - finally
try:
    10 * (1/0)
except ZeroDivisionError:
    print('нельзя делить на ноль!')
else:
    print('неужели?!')
finally:
    print('Прощай, мир!')





# обобщенный пример

f = None
try:
    # тут мы пишем код, как буд-то ошибок не будет... наивные...
    f = open('myfile.txt')
    s = f.readline()
    i = int(s.strip())
# а потом обрабатываем возможные ошибки
except IOError as exc:
    print("I/O error: ", exc)
except ValueError:
    print("Не могу преобразовать данные в целое!")
except Exception as exc:
    print("Неожиданная ошибка:", exc)
else:
    print('прочитано i=', i)
finally:
	if f is not None:
		f.close()







# Кстати в методе __exit__ для контекстного менеджера параметры отвечают за исключения

with open('myfile.txt') as ff:
    first_line = ff.readline()
print(first_line)


class InOutBlock:

    def __enter__(self):
        print('Входим в блок кода')

    def __exit__(self, exc_type, exc_val, exc_tb):
        print(f'Выходим из блока кода {exc_type}, {exc_val}, {exc_tb}')
        return True  # возвращаем истину, что бы погасить полет исключения


with InOutBlock() as in_out:
    print('Работаем...')
    a = bla_bla / number
    print('Вычислили значение')
print('После контекстного менеджера')

######################################################################################################################




# -*- coding: utf-8 -*-

# Порождение исключений
# Зачастую нужно самим создавать исключение, если код не может справиться с данными


def greet_person(person_name):
    """
    says hello
    """
    if person_name == 'Robert':
        # создаем обьект исключения и райзим его
        raise BaseException("We don't like you, Robert")
    print(f'Hi there {person_name}')


greet_person('Dolly')
# greet_person('Robert')


##################
# Варианты порождения исключений
def greet_person(person_name):
    """
    says hello
    """
    if person_name == 'Robert':
        # можно указать только класс исключения,
        # тогда автоматически создастся обьект исключения без параметров
        raise BaseException
    print(f'Hi there {person_name}')


greet_person('Robert')
# но так лучше не делать - старый стиль

# в сети иногда попадаются старинные варианты
# raise BaseException, "message" - валидно для 2.х пайтона, не делайте так
# или даже
# raise "message" - валидно для <2.4 пайтона, не делайте так


##################
# Проброс исключений
try:
    raise NameError('Привет Там')
except NameError as exc:
    print(f'Исключение типа {type(exc)} пролетело мимо! его параметры {exc.args}')
    # обратите внимание на "пустой" оператор - будет переброшено исключение текущего скоупа.
    raise
# используется для зачистки возможно порушенных данных и/или логирования ошибки
# и передачи отвественности вовне - пусть там решают что делать дальше

# можно формировать другое исключение
try:
    raise NameError('Привет Там')
except NameError as exc:
    print(f'Поймано исключение типа {type(exc)}')
    raise TypeError('Привет и тут')
# автоматом прицепляется обьект породившего исключения, в атрбибут __cause__

# можно явно указать
try:
    raise NameError('Привет Там')
except NameError as exc:
    print(f'Поймано исключение типа {type(exc)}')
    raise TypeError('Привет и тут') from exc


##################
# Кастомные исключения
# Можно определять свои исключения - например исключения нашего пакета
class HeroDiedError(Exception):
    pass


class GameOverError(Exception):
    pass


try:
    raise HeroDiedError('Рядовой Райан')
except HeroDiedError as exc:
    print(f'Поймано исключение {exc}')
    raise GameOverError('Миссия провалена')
# первый параметр, как говорилось, сообщение на консоль,
# остальные параметры можно использовать для уточнения самой ошибки
# (входные данные, которые к ней привели, к примеру)


# Иногда возникает необходимость переопределить содержимое обьекта исключения - это можно сделать вот так
class DivisionError(Exception):

    def __init__(self, message, input_data=None):
        self.message = message
        self.input_data = input_data

    def __str__(self):
        return self.message
# Но этим лучше не злоупотреблять - ломаются все автоматические обработчики исключений.
# Ваш код может быть библиотекой, которую будут использовать другие программисты.
# И другие программисты полагаются на стандарт, не заставляйте их ковыряться в вашем коде - проклянут же.


def division(a, b):
    if a < b:
        raise DivisionError('Нельзя делить меньшее на большее', input_data=dict(a=a, b=b))
    return a/b


try:
    division(1, 2)
except DivisionError as exc:
    print(f'Поймано моё исключение {exc}, входные данные при ошибке {exc.input_data}')

# Повторюсь: переопределение стандартных компонентов Exception - так себе стиль. Но если уж очень нужно...


# Наверно, наиболее частые случаи принудительного выброса исключений:
#   - проверка типов параметров методов/функций
#   - проверка совместности параметров методов/функций
#   - нарушение возможности работы кода (неправильные данные)




##########################################################################################################



# -*- coding: utf-8 -*-

# Зачастую библиотеки/пакеты пайтона определяют свои исключения, специфичные для их работы.

# Например, для библиотеки работы с http запросами
import requests

url = 'http://ya.ru'
try:
    data = requests.get(url)
    print(data.text)
except requests.ConnectionError as exc:
    print(f'не могу соединится с {url} потому что {exc}')
# то есть мы можем обрабатывать нештатные ситуации,
# с которой библиотека не справилась (изменить адрес, к примеру, или перейти к следующему)


# или для django
from my_app.models import Blog

try:
    Blog.objects.get(id=27)
except Blog.DoesNotExist:
    print('нет такой записи блога')


# или для pygame (движок диплома)
import pygame


def load_image(name, colorkey=None):
    """
        Load image from file
    """
    fullname = os.path.join(theme.PICTURES_PATH, name)
    try:
        image = pygame.image.load(fullname)
    except pygame.error as exc:
        print("Cannot load image:", fullname)
        raise SystemExit(exc)
    if colorkey is not None:
        if colorkey is -1:
            colorkey = image.get_at((0, 0))
        image.set_colorkey(colorkey, RLEACCEL)
    return image

# Таким способом мы может поймать специфичные для библиотек исключения
# и принять решение что делать дальше



#################################################################################################################################

WARNING 

# -*- coding: utf-8 -*-

# Предупреждения - Warnings
#
# Обычно используются для сообщений пользователю о ситуациях в ходе выполнения программы,
# которые не должны приводить к остановке программы.
#
# Часто можно видеть в библиотеках - они предупреждают что, пока работают,
# но в будущем могут сломаться...


# Бросить предупреждение - функция warnings.warn()
import warnings


def greet_person(person_name):
    if person_name == 'Robert':
        warnings.warn('Опять этот Роберт...')
    print(f'Hi there {person_name}')


greet_person('Robert')
print('Выполнение продолжается')
for i in range(10):
    print(f'i={i}')


# функция warn() может принимать категорию предупреждения
#
# Warning - This is the base class of all warning category classes.
#           It is a subclass of Exception.
# UserWarning - The default category for warn().
# DeprecationWarning - Base category for warnings about deprecated features
#           (ignored by default).
# SyntaxWarning - Base category for warnings about dubious syntactic features.
# RuntimeWarning - Base category for warnings about dubious runtime features.
# FutureWarning  - Base category for warnings about constructs that will change
#           semantically in the future.
# PendingDeprecationWarning - Base category for warnings about features that will be
#           deprecated in the future
#           (ignored by default).
# ImportWarning 	Base category for warnings triggered during
#           the process of importing a module
#           (ignored by default).
# UnicodeWarning 	Base category for warnings related to Unicode.
# BytesWarning 	Base category for warnings related to bytes and bytearray.
# ResourceWarning 	Base category for warnings related to resource usage.

def greet_person(person_name):
    if person_name == 'Robert':
        warnings.warn('Опять этот Роберт...', category=RuntimeWarning)
    print(f'Hi there {person_name}')


greet_person('Robert')

# ловить варгинги нельзя! многие путаются
try:
    greet_person('Robert')
    print('Выполнение продолжается')
except RuntimeWarning:
    print('поймали RuntimeWarning!!!')
for i in range(10):
    print(f'i={i}')


# Но можно фильтровать предупреждения, выводимые программой. Существуют такие действия фильтров:
#
# "error" 	turn matching warnings into exceptions
# "ignore" 	never print matching warnings
# "always" 	always print matching warnings
# "default" 	print the first occurrence of matching warnings for each location where the warning is issued
# "module" 	print the first occurrence of matching warnings for each module where the warning is issued
# "once" 	print only the first occurrence of matching warnings, regardless of location

# как временно отключить предупреждения?
#  - запустить скрипт с параметром -W "ignore"
#  - вызвать функцию simplefilter("ignore")


def greet_person(person_name):
    if person_name == 'Robert':
        warnings.warn('Опять этот Роберт...', category=RuntimeWarning)
    print(f'Hi there {person_name}')


warnings.simplefilter("ignore")
greet_person('Robert')


# более подробно см https://docs.python.org/3.6/library/warnings.html


##########################################################################################################################


# -*- coding: utf-8 -*-

# Есть файл calc.txt с записями операций - текстовый калькулятор. Записи вида
#
# 100 + 34
# 23 / 4
#
# то есть ОПЕРАНД_1 ОПЕРАЦИЯ ОПЕРАНД_2, разделенные пробелами.
# Операндны - целые числа. Операции - арифметические, целочисленное деление и остаток от деления.
#
# Нужно вычислить все операции и найти сумму их результата.


def calc(line):
    # print(f'Read line {line}', flush=True)
    operand_1, operation, operand_2 = line.split(' ')
    operand_1 = int(operand_1)
    operand_2 = int(operand_2)
    if operation == '+':
        value = operand_1 + operand_2
    elif operation == '-':
        value = operand_1 - operand_2
    elif operation == '/':
        value = operand_1 / operand_2
    elif operation == '*':
        value = operand_1 / operand_2
    elif operation == '//':
        value = operand_1 // operand_2
    elif operation == '%':
        value = operand_1 % operand_2
    else:
        raise ValueError('Unknown operation {operation}')
    return value


total = 0
with open('calc.txt', 'r') as ff:
    for line in ff:
        line = line[:-1]
        try:
            total += calc(line)
        except ValueError as exc:
            if 'unpack' in exc.args[0]:
                print(f'Не хватает операндов {exc} в строке {line}')
            else:
                print(f'Не могу преобразовать к целому {exc} в строке {line}')

print(f'Total {total}')









